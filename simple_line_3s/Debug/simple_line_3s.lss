
simple_line_3s.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000c0  00000000  00000000  00000a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000053b  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000153  00000000  00000000  00001013  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004da  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016c  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e7  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  8a:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sensor_init>:
#include "line.h"


void sensor_init()
{
	sensor_dir=input;
  92:	1a ba       	out	0x1a, r1	; 26
}
  94:	08 95       	ret

00000096 <move_on>:



void move_on()
{
	forward();
  96:	0e 94 ba 00 	call	0x174	; 0x174 <forward>
	rightmotor_speed(120);
  9a:	88 e7       	ldi	r24, 0x78	; 120
  9c:	0e 94 a3 00 	call	0x146	; 0x146 <rightmotor_speed>
	leftmotor_speed(120);
  a0:	88 e7       	ldi	r24, 0x78	; 120
  a2:	0e 94 8c 00 	call	0x118	; 0x118 <leftmotor_speed>
}
  a6:	08 95       	ret

000000a8 <stop>:

void stop()
{
	forward();
  a8:	0e 94 ba 00 	call	0x174	; 0x174 <forward>
	rightmotor_speed(0);
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 a3 00 	call	0x146	; 0x146 <rightmotor_speed>
	leftmotor_speed(0);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 8c 00 	call	0x118	; 0x118 <leftmotor_speed>
}
  b8:	08 95       	ret

000000ba <turn_right1>:


void turn_right1()
{
	forward();
  ba:	0e 94 ba 00 	call	0x174	; 0x174 <forward>
	rightmotor_speed(113);
  be:	81 e7       	ldi	r24, 0x71	; 113
  c0:	0e 94 a3 00 	call	0x146	; 0x146 <rightmotor_speed>
	leftmotor_speed(120);
  c4:	88 e7       	ldi	r24, 0x78	; 120
  c6:	0e 94 8c 00 	call	0x118	; 0x118 <leftmotor_speed>
	
}
  ca:	08 95       	ret

000000cc <turn_left1>:

void turn_left1()
{
	forward();
  cc:	0e 94 ba 00 	call	0x174	; 0x174 <forward>
	rightmotor_speed(120);
  d0:	88 e7       	ldi	r24, 0x78	; 120
  d2:	0e 94 a3 00 	call	0x146	; 0x146 <rightmotor_speed>
	leftmotor_speed(113);
  d6:	81 e7       	ldi	r24, 0x71	; 113
  d8:	0e 94 8c 00 	call	0x118	; 0x118 <leftmotor_speed>
}
  dc:	08 95       	ret

000000de <turn90right>:

void turn90right()
{
	reverse_right();
  de:	0e 94 bf 00 	call	0x17e	; 0x17e <reverse_right>
	rightmotor_speed(100);
  e2:	84 e6       	ldi	r24, 0x64	; 100
  e4:	0e 94 a3 00 	call	0x146	; 0x146 <rightmotor_speed>
	leftmotor_speed(100);
  e8:	84 e6       	ldi	r24, 0x64	; 100
  ea:	0e 94 8c 00 	call	0x118	; 0x118 <leftmotor_speed>
}
  ee:	08 95       	ret

000000f0 <turn90left>:

void turn90left()
{
	reverse_left();
  f0:	0e 94 c4 00 	call	0x188	; 0x188 <reverse_left>
	rightmotor_speed(100);
  f4:	84 e6       	ldi	r24, 0x64	; 100
  f6:	0e 94 a3 00 	call	0x146	; 0x146 <rightmotor_speed>
	leftmotor_speed(100);
  fa:	84 e6       	ldi	r24, 0x64	; 100
  fc:	0e 94 8c 00 	call	0x118	; 0x118 <leftmotor_speed>
}
 100:	08 95       	ret

00000102 <motor_init>:



motor_init()
{
	pin_write(motor_pins_dir,rightmotor_out1,output);
 102:	a0 9a       	sbi	0x14, 0	; 20
	pin_write(motor_pins_dir,rightmotor_out2,output);
 104:	a1 9a       	sbi	0x14, 1	; 20
	pin_write(motor_pins_dir,leftmotor_out1,output);
 106:	a2 9a       	sbi	0x14, 2	; 20
	pin_write(motor_pins_dir,leftmotor_out2,output);
 108:	a3 9a       	sbi	0x14, 3	; 20
	pin_write(motor_pins_val,rightmotor_out1,high);
 10a:	a8 9a       	sbi	0x15, 0	; 21
	pin_write(motor_pins_val,rightmotor_out2,low);
 10c:	a9 98       	cbi	0x15, 1	; 21
	pin_write(motor_pins_val,leftmotor_out1,low);
 10e:	aa 98       	cbi	0x15, 2	; 21
	pin_write(motor_pins_val,leftmotor_out2,high);
 110:	ab 9a       	sbi	0x15, 3	; 21
	pin_write(DDRB,pin3,output);
 112:	bb 9a       	sbi	0x17, 3	; 23
	pin_write(DDRD,pin7,output);	
 114:	8f 9a       	sbi	0x11, 7	; 17
}
 116:	08 95       	ret

00000118 <leftmotor_speed>:



leftmotor_speed(char s)
{
	OCR0=s;
 118:	8c bf       	out	0x3c, r24	; 60
	TCCR0=(TCCR0&(~(1<<WGM01)))|(0<<WGM01);		// select mode ...
 11a:	83 b7       	in	r24, 0x33	; 51
 11c:	87 7f       	andi	r24, 0xF7	; 247
 11e:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,WGM00,high);				// mode -> fast pwm
 120:	83 b7       	in	r24, 0x33	; 51
 122:	80 64       	ori	r24, 0x40	; 64
 124:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,CS02,low);					// clock selector
 126:	83 b7       	in	r24, 0x33	; 51
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,CS01,high);					//...
 12c:	83 b7       	in	r24, 0x33	; 51
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,CS00,high);					// clk/64
 132:	83 b7       	in	r24, 0x33	; 51
 134:	81 60       	ori	r24, 0x01	; 1
 136:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,COM00,low);					// compare output mode
 138:	83 b7       	in	r24, 0x33	; 51
 13a:	8f 7e       	andi	r24, 0xEF	; 239
 13c:	83 bf       	out	0x33, r24	; 51
	pin_write(TCCR0,COM01,high);				// non-inverted
 13e:	83 b7       	in	r24, 0x33	; 51
 140:	80 62       	ori	r24, 0x20	; 32
 142:	83 bf       	out	0x33, r24	; 51
		
}
 144:	08 95       	ret

00000146 <rightmotor_speed>:

rightmotor_speed(char s)
{
	
	OCR2=s;
 146:	83 bd       	out	0x23, r24	; 35
	pin_write(TCCR2,WGM21,low);
 148:	85 b5       	in	r24, 0x25	; 37
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,WGM20,high);
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	80 64       	ori	r24, 0x40	; 64
 152:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,CS22,high);
 154:	85 b5       	in	r24, 0x25	; 37
 156:	84 60       	ori	r24, 0x04	; 4
 158:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,CS21,low);
 15a:	85 b5       	in	r24, 0x25	; 37
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,CS20,low);
 160:	85 b5       	in	r24, 0x25	; 37
 162:	8e 7f       	andi	r24, 0xFE	; 254
 164:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,COM20,low);
 166:	85 b5       	in	r24, 0x25	; 37
 168:	8f 7e       	andi	r24, 0xEF	; 239
 16a:	85 bd       	out	0x25, r24	; 37
	pin_write(TCCR2,COM21,high);
 16c:	85 b5       	in	r24, 0x25	; 37
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	85 bd       	out	0x25, r24	; 37
}
 172:	08 95       	ret

00000174 <forward>:



void forward()
{
	pin_write(motor_pins_val,rightmotor_out1,high);
 174:	a8 9a       	sbi	0x15, 0	; 21
	pin_write(motor_pins_val,rightmotor_out2,low);
 176:	a9 98       	cbi	0x15, 1	; 21
	pin_write(motor_pins_val,3,high);
 178:	ab 9a       	sbi	0x15, 3	; 21
	pin_write(motor_pins_val,2,low);
 17a:	aa 98       	cbi	0x15, 2	; 21
}
 17c:	08 95       	ret

0000017e <reverse_right>:

void reverse_right()
{
	pin_write(motor_pins_val,rightmotor_out1,low);
 17e:	a8 98       	cbi	0x15, 0	; 21
	pin_write(motor_pins_val,rightmotor_out2,high);
 180:	a9 9a       	sbi	0x15, 1	; 21
	pin_write(motor_pins_val,3,high);
 182:	ab 9a       	sbi	0x15, 3	; 21
	pin_write(motor_pins_val,2,low);
 184:	aa 98       	cbi	0x15, 2	; 21
}
 186:	08 95       	ret

00000188 <reverse_left>:

void reverse_left()
{
	pin_write(motor_pins_val,rightmotor_out1,high);
 188:	a8 9a       	sbi	0x15, 0	; 21
	pin_write(motor_pins_val,rightmotor_out2,low);
 18a:	a9 98       	cbi	0x15, 1	; 21
	pin_write(motor_pins_val,3,low);
 18c:	ab 98       	cbi	0x15, 3	; 21
	pin_write(motor_pins_val,2,high);
 18e:	aa 9a       	sbi	0x15, 2	; 21
 190:	08 95       	ret

00000192 <main>:

#include <avr/io.h>
#include "line.h"

int main(void)
{
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
	
	motor_init();
 19a:	0e 94 81 00 	call	0x102	; 0x102 <motor_init>
	sensor_init();
 19e:	0e 94 49 00 	call	0x92	; 0x92 <sensor_init>
	int _track_counter=0;
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
		
		 
		  //CHECK POINT
		  if (chekpoint1==1)
		  {
			  _track_counter=7;
 1a6:	07 e0       	ldi	r16, 0x07	; 7
 1a8:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
		
		//lnumber(PORTD,_track_counter); // for test
				// COUNTER
				if ( right_counter==blackk && left_counter==blackk && _toggolled != 1 ){
 1aa:	89 b3       	in	r24, 0x19	; 25
 1ac:	81 ff       	sbrs	r24, 1
 1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <main+0x32>
 1b0:	89 b3       	in	r24, 0x19	; 25
 1b2:	85 ff       	sbrs	r24, 5
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <main+0x32>
					
					_toggolled = 1;
					_track_counter++;
 1b6:	21 96       	adiw	r28, 0x01	; 1
					while(right_counter==blackk && left_counter==blackk);
 1b8:	89 b3       	in	r24, 0x19	; 25
 1ba:	81 ff       	sbrs	r24, 1
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <main+0x32>
 1be:	89 b3       	in	r24, 0x19	; 25
 1c0:	85 fd       	sbrc	r24, 5
 1c2:	fa cf       	rjmp	.-12     	; 0x1b8 <main+0x26>
					_toggolled = 0;
				}
				
				if (_track_counter==8)
 1c4:	c8 30       	cpi	r28, 0x08	; 8
 1c6:	d1 05       	cpc	r29, r1
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <main+0x3e>
				{
					turn90right();
 1ca:	0e 94 6f 00 	call	0xde	; 0xde <turn90right>
 1ce:	0c c0       	rjmp	.+24     	; 0x1e8 <main+0x56>
				}
				else if (_track_counter==10)
 1d0:	ca 30       	cpi	r28, 0x0A	; 10
 1d2:	d1 05       	cpc	r29, r1
 1d4:	49 f4       	brne	.+18     	; 0x1e8 <main+0x56>
				{
					stop();
 1d6:	0e 94 54 00 	call	0xa8	; 0xa8 <stop>
		}
		//END CHECK POINT
		*/
		
    }
}
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret
				}
				//END COUNTER

			 
		//line follower
         if (right==white && center==black && left==white)
 1e8:	89 b3       	in	r24, 0x19	; 25
 1ea:	82 ff       	sbrs	r24, 2
 1ec:	09 c0       	rjmp	.+18     	; 0x200 <main+0x6e>
 1ee:	89 b3       	in	r24, 0x19	; 25
 1f0:	83 fd       	sbrc	r24, 3
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <main+0x6e>
 1f4:	89 b3       	in	r24, 0x19	; 25
 1f6:	84 ff       	sbrs	r24, 4
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <main+0x6e>
		 {
			 move_on();
 1fa:	0e 94 4b 00 	call	0x96	; 0x96 <move_on>
 1fe:	23 c0       	rjmp	.+70     	; 0x246 <main+0xb4>
		 }
		 else if (center==black && right==black)
 200:	89 b3       	in	r24, 0x19	; 25
 202:	83 fd       	sbrc	r24, 3
 204:	06 c0       	rjmp	.+12     	; 0x212 <main+0x80>
 206:	89 b3       	in	r24, 0x19	; 25
 208:	82 fd       	sbrc	r24, 2
 20a:	03 c0       	rjmp	.+6      	; 0x212 <main+0x80>
		 {
			turn_right1();
 20c:	0e 94 5d 00 	call	0xba	; 0xba <turn_right1>
 210:	1a c0       	rjmp	.+52     	; 0x246 <main+0xb4>
		 }
		 else if (center==white && right==black)
 212:	89 b3       	in	r24, 0x19	; 25
 214:	83 ff       	sbrs	r24, 3
 216:	06 c0       	rjmp	.+12     	; 0x224 <main+0x92>
 218:	89 b3       	in	r24, 0x19	; 25
 21a:	82 fd       	sbrc	r24, 2
 21c:	03 c0       	rjmp	.+6      	; 0x224 <main+0x92>
		 {
			 turn90right();
 21e:	0e 94 6f 00 	call	0xde	; 0xde <turn90right>
 222:	11 c0       	rjmp	.+34     	; 0x246 <main+0xb4>
		 }
		 else if (center==black && left==black)
 224:	89 b3       	in	r24, 0x19	; 25
 226:	83 fd       	sbrc	r24, 3
 228:	06 c0       	rjmp	.+12     	; 0x236 <main+0xa4>
 22a:	89 b3       	in	r24, 0x19	; 25
 22c:	84 fd       	sbrc	r24, 4
 22e:	03 c0       	rjmp	.+6      	; 0x236 <main+0xa4>
		 {
			 turn_left1();
 230:	0e 94 66 00 	call	0xcc	; 0xcc <turn_left1>
 234:	08 c0       	rjmp	.+16     	; 0x246 <main+0xb4>
		 }
		 else if (center==white && left==black)
 236:	89 b3       	in	r24, 0x19	; 25
 238:	83 ff       	sbrs	r24, 3
 23a:	05 c0       	rjmp	.+10     	; 0x246 <main+0xb4>
 23c:	89 b3       	in	r24, 0x19	; 25
 23e:	84 fd       	sbrc	r24, 4
 240:	02 c0       	rjmp	.+4      	; 0x246 <main+0xb4>
		 {
			 turn90left();
 242:	0e 94 78 00 	call	0xf0	; 0xf0 <turn90left>
		 }
		  if (right==black && center==black && left==black)
 246:	89 b3       	in	r24, 0x19	; 25
 248:	82 fd       	sbrc	r24, 2
 24a:	08 c0       	rjmp	.+16     	; 0x25c <main+0xca>
 24c:	89 b3       	in	r24, 0x19	; 25
 24e:	83 fd       	sbrc	r24, 3
 250:	05 c0       	rjmp	.+10     	; 0x25c <main+0xca>
 252:	89 b3       	in	r24, 0x19	; 25
 254:	84 fd       	sbrc	r24, 4
 256:	02 c0       	rjmp	.+4      	; 0x25c <main+0xca>
		  {
			  move_on();
 258:	0e 94 4b 00 	call	0x96	; 0x96 <move_on>
		  }
		
		
		 
		  //CHECK POINT
		  if (chekpoint1==1)
 25c:	85 b3       	in	r24, 0x15	; 21
 25e:	84 fd       	sbrc	r24, 4
		  {
			  _track_counter=7;
 260:	e8 01       	movw	r28, r16
		  }
		  if (chekpoint2==2)
 262:	85 b3       	in	r24, 0x15	; 21
			}
		}
		//END CHECK POINT
		*/
		
    }
 264:	a2 cf       	rjmp	.-188    	; 0x1aa <main+0x18>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
